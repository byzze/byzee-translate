// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Â MODIWL
// This file is automatically generated. DO NOT EDIT

import {Call} from '@wailsio/runtime';

/**
 * CaptureSelectedScreen 截取选中的区域 
 * @function CaptureSelectedScreen
 * @param startX {number}
 * @param startY {number}
 * @param width {number}
 * @param height {number}
 * @returns {Promise<void>}
 **/
export async function CaptureSelectedScreen(startX, startY, width, height) {
	return Call.ByName("main.App.CaptureSelectedScreen", ...Array.prototype.slice.call(arguments, 0));
}

/**
 * GetTransalteMap 获取所有翻译配置 
 * @function GetTransalteMap
 * @returns {Promise<string>}
 **/
export async function GetTransalteMap() {
	return Call.ByName("main.App.GetTransalteMap", ...Array.prototype.slice.call(arguments, 0));
}

/**
 * GetTransalteWay 获取当前翻译的服务 
 * @function GetTransalteWay
 * @returns {Promise<string>}
 **/
export async function GetTransalteWay() {
	return Call.ByName("main.App.GetTransalteWay", ...Array.prototype.slice.call(arguments, 0));
}

/**
 * Hide 通过名字控制窗口事件 
 * @function Hide
 * @param windowName {string}
 * @returns {Promise<void>}
 **/
export async function Hide(windowName) {
	return Call.ByName("main.App.Hide", ...Array.prototype.slice.call(arguments, 0));
}

/**
 * MyFetch URl 
 * @function MyFetch
 * @param URL {string}
 * @param content {map}
 * @returns {Promise<>}
 **/
export async function MyFetch(URL, content) {
	return Call.ByName("main.App.MyFetch", ...Array.prototype.slice.call(arguments, 0));
}

/**
 * SetTransalteWay 设置当前翻译服务 
 * @function SetTransalteWay
 * @param translateWay {string}
 * @returns {Promise<void>}
 **/
export async function SetTransalteWay(translateWay) {
	return Call.ByName("main.App.SetTransalteWay", ...Array.prototype.slice.call(arguments, 0));
}

/**
 * Show 通过名字控制窗口事件 
 * @function Show
 * @param windowName {string}
 * @returns {Promise<void>}
 **/
export async function Show(windowName) {
	return Call.ByName("main.App.Show", ...Array.prototype.slice.call(arguments, 0));
}

/**
 * ToolBarShow 显示工具弹窗，控制大小，布局, 前端调用，传递文本高度 
 * @function ToolBarShow
 * @param height {number}
 * @returns {Promise<void>}
 **/
export async function ToolBarShow(height) {
	return Call.ByName("main.App.ToolBarShow", ...Array.prototype.slice.call(arguments, 0));
}

/**
 * Transalte 翻译逻辑 
 * @function Transalte
 * @param queryText {string}
 * @param fromLang {string}
 * @param toLang {string}
 * @returns {Promise<string>}
 **/
export async function Transalte(queryText, fromLang, toLang) {
	return Call.ByName("main.App.Transalte", ...Array.prototype.slice.call(arguments, 0));
}
